package _9_polimorfismo;

public class Teoria {

	/*
	___________POLIMORFISMO________
	
	O polimorfismo nos permite realizar uma única ação de maneiras diferentes. Em outras palavras, o polimorfismo permite 
	definir uma interface e ter várias implementações. A palavra “poli” significa muitos e “morfos” significa formas, 
	então significa muitas formas.

	Em Java, o polimorfismo é dividido principalmente em dois tipos:

	- POLIMORFISMO EM TEMPO DE COMPILAÇÃO:
	(Overloading - Se dá quando temos a mesma operação implementada várias vezes na MESMA CLASSE.)
	O tipo de polimorfismo de Sobrecarga permite a existência de vários métodos de MESMO NOME, porém com assinaturas levemente 
	diferentes, ou seja, variando no número e tipo de argumentos. Ex.: Construtores.
	Também é conhecido como polimorfismo estático. 
	Sobrecarga de método: quando existem várias funções com o MESMO NOME, mas PARÂMETROS DIFERENTES.


	- POLIMORFISMO EM TEMPO DE EXECUÇÃO:
	(Overriding - Acontece na herança, quando a subclasse sobrepõe o método original.)
	Quando um método sobrescreve um método herdado de uma classe, temos uma sobrescrita de método. Este método de sobrescrita 
	tem que ser idêntico ao método da classe herdada, ou seja, eles precisam ter o mesmo nome, valor de retorno e argumentos. 
	Portanto, temos que uma classe filha fornece apenas uma nova implementação para o método herdado e não um novo método. 

	Se a classe filha fornecer um método de cabeçalho ou assinatura parecida com a do método herdado (difere ou no número ou 
	no tipo dos argumentos) então não se trata mais de redefinição, trata-se de uma sobrecarga, pois criou-se um novo método.
	O método tem o mesmo nome, mas é ligeiramente diferente na sua assinatura (o corpo ou bloco de código não importa), o que
	já implica que não proporciona o mesmo comportamento do método da superclasse. 
	*/
	
}
